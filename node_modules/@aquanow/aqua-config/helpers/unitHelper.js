const Big = require("big.js");
const tickers = require("../configs/tickers.js");
const coins = require("../configs/coins.js");

module.exports = (() => {
  return {
    roundBalance(val, symbol) {
      const bVal = new Big(val);
      return parseFloat(bVal.toFixed(coins[symbol].balancePrecision));
    },
    roundPrice(val, ticker) {
      const bVal = new Big(val);
      return parseFloat(bVal.toFixed(tickers[ticker].pricePrecision));
    },
    roundUpPrice(val, precision) {
      const bVal = new Big(val);
      const up = 3;
      return parseFloat(bVal.round(precision, up));
    },
    roundDownWithdraw(val, symbol) {
      const bVal = new Big(val);
      const down = 0;
      return parseFloat(bVal.round(coins[symbol].pricePrecision, down));
    },
    roundDownPrice(val, precision) {
      const bVal = new Big(val);
      const down = 0;
      return parseFloat(bVal.round(precision, down));
    },
    roundDownSize(val, symbol) {
      const bVal = new Big(val);
      const down = 0;
      return parseFloat(bVal.round(tickers[symbol].sizePrecision, down));
    },
    roundDownSizeAquaX(val) {
      const bVal = new Big(val);
      const down = 0;
      return parseFloat(bVal.round(10, down));
    },
    // Below is for AquaX, above is for AquaNow dealing with AquaX Orders
    roundDownAquaSize(val) {
      const down = 0;
      return parseFloat(new Big(val).round(10, down));
    },
    minimumSize(symbol) {
      return parseFloat(coins[symbol].minimumSize);
    },

    minimumSizeRFQ(symbol) {
      return parseFloat(coins[symbol].minimumSizeRFQ);
    }
  };
})();
